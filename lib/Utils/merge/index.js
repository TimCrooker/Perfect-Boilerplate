"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergePackages = exports.mergeBabel = exports.mergePluginData = exports.mergeJSONFiles = void 0;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

var _util = require("util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * @param pluginPath path to the plugin pack directory
 * @param pluginName name of the plugin to target
 * @param fileName name of the file inside of a plugin to target
 * @returns the file being targeted in the specified plugin
 */
const getPluginFile = (pluginPath, pluginName, fileName) => {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const pluginFile = require(_path.default.join(pluginPath, 'plugins', pluginName, fileName));

    return pluginFile;
  } catch (e) {
    return undefined;
  }
};
/**
 * Stringify the contents of a file inside of the plugin provided
 *
 * @param pluginPath path to the plugin pack directory
 * @param pluginName name of the plugin to target
 * @param fileName name of the file inside of the plugin to target
 */


const getStringFile = async (pluginPath, pluginName, fileName) => {
  try {
    const str = await (0, _util.promisify)(_fs.readFile)(_path.default.join(pluginPath, 'plugins', pluginName, fileName), 'utf8');

    if (typeof str === 'string') {
      return str;
    } else {
      return '{}';
    }
  } catch (e) {
    return '{}';
  }
};
/**
 * Combine JSON files of the same type into one file using deepMerge
 *
 * @param base
 * @param pluginsPath
 * @param plugins
 * @param fileName
 * @param mergeOptions
 * @returns
 */


const mergeJSONFiles = (base = {}, pluginsPath, plugins, fileName, mergeOptions) => {
  const baseFile = { ...base
  };
  const pluginFiles = plugins.map(plugin => {
    const file = getPluginFile(pluginsPath, plugin, fileName);
    return file ?? {};
  });
  return _deepmerge.default.all([baseFile, ...pluginFiles], mergeOptions);
};
/**
 * Combine all plugin meta.json data into one document
 *
 * @param base base dictionary of plugins
 * @param pluginsPath path to the plugin pack directory
 * @param plugins array of all selected plugins
 * @param fileName target file for the plugins
 */


exports.mergeJSONFiles = mergeJSONFiles;

const mergePluginData = (base = {}, pluginsPath, plugins, fileName) => {
  const baseFile = { ...base
  };
  baseFile.plugins = [];
  plugins.map(plugin => {
    if (['npm', 'yarn', 'react', 'nextjs', 'refine'].includes(plugin)) return;
    const file = getPluginFile(pluginsPath, plugin, fileName) ?? {};
    baseFile.plugins.push({
      name: file.name ?? plugin,
      description: file.description ?? '',
      url: file.url ?? ''
    });
  });
  return baseFile;
};
/**
 * combine all .babelrc files together into one
 *
 * @param base base dictionary of plugins
 * @param pluginsPath path to the plugin pack directory
 * @param plugins array of all selected plugins
 */


exports.mergePluginData = mergePluginData;

const mergeBabel = async (base, pluginsPath, plugins) => {
  const baseBabel = { ...base
  };
  const pluginRcs = await Promise.all(plugins.map(async plugin => {
    const str = await getStringFile(pluginsPath, plugin, '.babelrc');
    const parsed = JSON.parse(str);
    return parsed ?? {};
  }));

  const merged = _deepmerge.default.all([baseBabel, ...pluginRcs]);

  const uniquePresets = [];
  const presetsSet = new Set(merged.presets ?? []);
  presetsSet.forEach(el => uniquePresets.push(el));
  merged.presets = uniquePresets;
  return merged;
};
/**
 * merge package.json and package.js files together
 *
 * @param base all of the data provided by the saoFile data function
 * @param pluginsPath
 * @param plugins
 * @param answers
 */


exports.mergeBabel = mergeBabel;

const mergePackages = (base = {}, pluginsPath, plugins, answers) => {
  const basePkg = { ...base
  };
  const pluginPkgs = plugins.map(plugin => {
    const pluginPkg = getPluginFile(pluginsPath, plugin, 'package.json');
    const pluginPkgFn = getPluginFile(pluginsPath, plugin, 'package.js');

    if (pluginPkgFn && pluginPkg) {
      const fnPkg = pluginPkgFn.apply(pluginPkg, answers);
      return fnPkg;
    } else if (pluginPkg) {
      return pluginPkg;
    }

    return {};
  });
  return _deepmerge.default.all([basePkg, ...pluginPkgs]);
};

exports.mergePackages = mergePackages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,