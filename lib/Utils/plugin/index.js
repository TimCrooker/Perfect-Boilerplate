"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleIgnore = exports.concatExtend = exports.getExtend = exports.getPluginsArray = exports.extendBase = void 0;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Base file structure to extend
 */
const extendBase = {
  _app: {
    import: [],
    inner: [],
    wrapper: []
  },
  _document: {
    import: [],
    initialProps: []
  }
};
/**
 * @summary Parse user answers for their desired plugins
 *
 * @param answers Dictionary of [key, value] pairs of answers all prompts
 *
 * @returns an array of selected plugins
 */

exports.extendBase = extendBase;

const getPluginsArray = answers => {
  return Object.entries(answers).reduce((acc, [key, value]) => {
    console.log(acc, key, value);
    if (typeof value === 'boolean' && value) return [...acc, key];
    if (typeof value === 'string') return [...acc, value];
    if (Array.isArray(value)) return [...acc, ...value];
    return acc;
  }, []).filter(value => value !== 'none');
};
/**
 *
 * @param pluginPath path to a plugin pack
 * @param pluginName name of the plugin from the pack to target
 * @returns object containing extend function that itself returns the extend object to merge with the template files
 */


exports.getPluginsArray = getPluginsArray;

const getExtend = (pluginPath, pluginName) => {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const pluginExtend = require(_path.default.join(pluginPath, 'plugins', pluginName, 'extend.js'));

    return pluginExtend;
  } catch (e) {
    return undefined;
  }
};
/**
 *
 * @param base The base file structure that plugins can expand on
 * @param plugins Array of user-selected plugins to integrate
 * @param sourcePath Source directory of the selected plugin pack
 * @param answers [pluginName, answer] List of supplied user answers to all prompts
 * @returns the merged combination of the base file structure and the supplied extend.js file
 */


exports.getExtend = getExtend;

const concatExtend = (base, plugins, sourcePath, answers) => {
  // combines the extend.js file with the base file from the plugin pack template
  const merged = _deepmerge.default.all([base, ...plugins.map(plugin => {
    const pluginExtendFile = getExtend(sourcePath, plugin);

    if (pluginExtendFile) {
      const pluginExtends = pluginExtendFile.extend(answers);
      return pluginExtends;
    }

    return {};
  })]);

  return merged;
};
/**
 * 
 * @param ignores the array of ignore objects from the plugin packs prompt.js
 * @param answers answers provided by the user to all prompt questions
 * @param plugin name of the current plugin to target
 * @returns 
 */


exports.concatExtend = concatExtend;

const handleIgnore = (ignores, answers, plugin) => {
  const filters = {};
  ignores.forEach(ignore => {
    if (!!ignore.plugin === false || !!ignore.plugin && ignore.plugin.includes(plugin)) {
      var _ignore$when;

      const condition = (_ignore$when = ignore.when) === null || _ignore$when === void 0 ? void 0 : _ignore$when.call(ignore, answers);

      if (condition) {
        ignore.pattern.forEach(pattern => {
          filters[pattern] = false;
        });
      }
    }
  });
  return filters;
};

exports.handleIgnore = handleIgnore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,