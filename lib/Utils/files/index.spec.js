"use strict";

var _ = require("./");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const removeDir = function (path) {
  if (_fs.default.existsSync(path)) {
    const files = _fs.default.readdirSync(path);

    if (files.length > 0) {
      files.forEach(function (filename) {
        if (_fs.default.statSync(path + '/' + filename).isDirectory()) {
          removeDir(path + '/' + filename);
        } else {
          _fs.default.unlinkSync(path + '/' + filename);
        }
      });

      _fs.default.rmdirSync(path);
    } else {
      _fs.default.rmdirSync(path);
    }
  } else {
    console.log('Directory path not found.');
  }
};

describe('FS Helper', () => {
  it('correct path exists', async () => {
    const PathExists = await _.FSHelper.PathExists('.');
    expect(PathExists).toBeTruthy();
  });
  it('incorrect path exists', async () => {
    const PathExists = await _.FSHelper.PathExists('../pankod');
    expect(PathExists).toBeFalsy();
  });

  const MockRootDir = _path.default.resolve(__dirname, 'MockPluginPackDir');

  it('correctly formatted plugin pack', async () => {
    removeDir(MockRootDir);
    await _fs.default.promises.mkdir(MockRootDir);
    await _fs.default.promises.mkdir(MockRootDir + '/template');
    await _fs.default.promises.mkdir(MockRootDir + '/plugins');
    await _fs.default.promises.writeFile(MockRootDir + '/prompt.js', 'test');
    const ValidPack = await _.FSHelper.ValidPluginPack(MockRootDir);
    removeDir(MockRootDir);
    expect(ValidPack).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9VdGlscy9maWxlcy9pbmRleC5zcGVjLnRzIl0sIm5hbWVzIjpbInJlbW92ZURpciIsInBhdGgiLCJmcyIsImV4aXN0c1N5bmMiLCJmaWxlcyIsInJlYWRkaXJTeW5jIiwibGVuZ3RoIiwiZm9yRWFjaCIsImZpbGVuYW1lIiwic3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsInVubGlua1N5bmMiLCJybWRpclN5bmMiLCJjb25zb2xlIiwibG9nIiwiZGVzY3JpYmUiLCJpdCIsIlBhdGhFeGlzdHMiLCJGU0hlbHBlciIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJ0b0JlRmFsc3kiLCJNb2NrUm9vdERpciIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJwcm9taXNlcyIsIm1rZGlyIiwid3JpdGVGaWxlIiwiVmFsaWRQYWNrIiwiVmFsaWRQbHVnaW5QYWNrIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsU0FBUyxHQUFHLFVBQVVDLElBQVYsRUFBd0I7QUFDeEMsTUFBSUMsWUFBR0MsVUFBSCxDQUFjRixJQUFkLENBQUosRUFBeUI7QUFDdkIsVUFBTUcsS0FBSyxHQUFHRixZQUFHRyxXQUFILENBQWVKLElBQWYsQ0FBZDs7QUFFQSxRQUFJRyxLQUFLLENBQUNFLE1BQU4sR0FBZSxDQUFuQixFQUFzQjtBQUNwQkYsTUFBQUEsS0FBSyxDQUFDRyxPQUFOLENBQWMsVUFBVUMsUUFBVixFQUFvQjtBQUNoQyxZQUFJTixZQUFHTyxRQUFILENBQVlSLElBQUksR0FBRyxHQUFQLEdBQWFPLFFBQXpCLEVBQW1DRSxXQUFuQyxFQUFKLEVBQXNEO0FBQ3BEVixVQUFBQSxTQUFTLENBQUNDLElBQUksR0FBRyxHQUFQLEdBQWFPLFFBQWQsQ0FBVDtBQUNELFNBRkQsTUFFTztBQUNMTixzQkFBR1MsVUFBSCxDQUFjVixJQUFJLEdBQUcsR0FBUCxHQUFhTyxRQUEzQjtBQUNEO0FBQ0YsT0FORDs7QUFPQU4sa0JBQUdVLFNBQUgsQ0FBYVgsSUFBYjtBQUNELEtBVEQsTUFTTztBQUNMQyxrQkFBR1UsU0FBSCxDQUFhWCxJQUFiO0FBQ0Q7QUFDRixHQWZELE1BZU87QUFDTFksSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksMkJBQVo7QUFDRDtBQUNGLENBbkJEOztBQXFCQUMsUUFBUSxDQUFDLFdBQUQsRUFBYyxNQUFNO0FBQzFCQyxFQUFBQSxFQUFFLENBQUMscUJBQUQsRUFBd0IsWUFBWTtBQUNwQyxVQUFNQyxVQUFVLEdBQUcsTUFBTUMsV0FBU0QsVUFBVCxDQUFvQixHQUFwQixDQUF6QjtBQUNBRSxJQUFBQSxNQUFNLENBQUNGLFVBQUQsQ0FBTixDQUFtQkcsVUFBbkI7QUFDRCxHQUhDLENBQUY7QUFLQUosRUFBQUEsRUFBRSxDQUFDLHVCQUFELEVBQTBCLFlBQVk7QUFDdEMsVUFBTUMsVUFBVSxHQUFHLE1BQU1DLFdBQVNELFVBQVQsQ0FBb0IsV0FBcEIsQ0FBekI7QUFDQUUsSUFBQUEsTUFBTSxDQUFDRixVQUFELENBQU4sQ0FBbUJJLFNBQW5CO0FBQ0QsR0FIQyxDQUFGOztBQUtBLFFBQU1DLFdBQVcsR0FBR3JCLGNBQUtzQixPQUFMLENBQWFDLFNBQWIsRUFBd0IsbUJBQXhCLENBQXBCOztBQUVBUixFQUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsWUFBWTtBQUNoRGhCLElBQUFBLFNBQVMsQ0FBQ3NCLFdBQUQsQ0FBVDtBQUVBLFVBQU1wQixZQUFHdUIsUUFBSCxDQUFZQyxLQUFaLENBQWtCSixXQUFsQixDQUFOO0FBRUEsVUFBTXBCLFlBQUd1QixRQUFILENBQVlDLEtBQVosQ0FBa0JKLFdBQVcsR0FBRyxXQUFoQyxDQUFOO0FBRUEsVUFBTXBCLFlBQUd1QixRQUFILENBQVlDLEtBQVosQ0FBa0JKLFdBQVcsR0FBRyxVQUFoQyxDQUFOO0FBRUEsVUFBTXBCLFlBQUd1QixRQUFILENBQVlFLFNBQVosQ0FBc0JMLFdBQVcsR0FBRyxZQUFwQyxFQUFrRCxNQUFsRCxDQUFOO0FBRUEsVUFBTU0sU0FBUyxHQUFHLE1BQU1WLFdBQVNXLGVBQVQsQ0FBeUJQLFdBQXpCLENBQXhCO0FBRUF0QixJQUFBQSxTQUFTLENBQUNzQixXQUFELENBQVQ7QUFFQUgsSUFBQUEsTUFBTSxDQUFDUyxTQUFELENBQU4sQ0FBa0JSLFVBQWxCO0FBQ0QsR0FoQkMsQ0FBRjtBQWlCRCxDQTlCTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRlNIZWxwZXIgfSBmcm9tICcuLydcclxuaW1wb3J0IGZzIGZyb20gJ2ZzJ1xyXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xyXG5cclxuY29uc3QgcmVtb3ZlRGlyID0gZnVuY3Rpb24gKHBhdGg6IHN0cmluZykge1xyXG4gIGlmIChmcy5leGlzdHNTeW5jKHBhdGgpKSB7XHJcbiAgICBjb25zdCBmaWxlcyA9IGZzLnJlYWRkaXJTeW5jKHBhdGgpXHJcblxyXG4gICAgaWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgZmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZmlsZW5hbWUpIHtcclxuICAgICAgICBpZiAoZnMuc3RhdFN5bmMocGF0aCArICcvJyArIGZpbGVuYW1lKS5pc0RpcmVjdG9yeSgpKSB7XHJcbiAgICAgICAgICByZW1vdmVEaXIocGF0aCArICcvJyArIGZpbGVuYW1lKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBmcy51bmxpbmtTeW5jKHBhdGggKyAnLycgKyBmaWxlbmFtZSlcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICAgIGZzLnJtZGlyU3luYyhwYXRoKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZnMucm1kaXJTeW5jKHBhdGgpXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnNvbGUubG9nKCdEaXJlY3RvcnkgcGF0aCBub3QgZm91bmQuJylcclxuICB9XHJcbn1cclxuXHJcbmRlc2NyaWJlKCdGUyBIZWxwZXInLCAoKSA9PiB7XHJcbiAgaXQoJ2NvcnJlY3QgcGF0aCBleGlzdHMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBQYXRoRXhpc3RzID0gYXdhaXQgRlNIZWxwZXIuUGF0aEV4aXN0cygnLicpXHJcbiAgICBleHBlY3QoUGF0aEV4aXN0cykudG9CZVRydXRoeSgpXHJcbiAgfSlcclxuXHJcbiAgaXQoJ2luY29ycmVjdCBwYXRoIGV4aXN0cycsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IFBhdGhFeGlzdHMgPSBhd2FpdCBGU0hlbHBlci5QYXRoRXhpc3RzKCcuLi9wYW5rb2QnKVxyXG4gICAgZXhwZWN0KFBhdGhFeGlzdHMpLnRvQmVGYWxzeSgpXHJcbiAgfSlcclxuXHJcbiAgY29uc3QgTW9ja1Jvb3REaXIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnTW9ja1BsdWdpblBhY2tEaXInKVxyXG5cclxuICBpdCgnY29ycmVjdGx5IGZvcm1hdHRlZCBwbHVnaW4gcGFjaycsIGFzeW5jICgpID0+IHtcclxuICAgIHJlbW92ZURpcihNb2NrUm9vdERpcilcclxuXHJcbiAgICBhd2FpdCBmcy5wcm9taXNlcy5ta2RpcihNb2NrUm9vdERpcilcclxuXHJcbiAgICBhd2FpdCBmcy5wcm9taXNlcy5ta2RpcihNb2NrUm9vdERpciArICcvdGVtcGxhdGUnKVxyXG5cclxuICAgIGF3YWl0IGZzLnByb21pc2VzLm1rZGlyKE1vY2tSb290RGlyICsgJy9wbHVnaW5zJylcclxuXHJcbiAgICBhd2FpdCBmcy5wcm9taXNlcy53cml0ZUZpbGUoTW9ja1Jvb3REaXIgKyAnL3Byb21wdC5qcycsICd0ZXN0JylcclxuXHJcbiAgICBjb25zdCBWYWxpZFBhY2sgPSBhd2FpdCBGU0hlbHBlci5WYWxpZFBsdWdpblBhY2soTW9ja1Jvb3REaXIpXHJcblxyXG4gICAgcmVtb3ZlRGlyKE1vY2tSb290RGlyKVxyXG5cclxuICAgIGV4cGVjdChWYWxpZFBhY2spLnRvQmVUcnV0aHkoKVxyXG4gIH0pXHJcbn0pXHJcbiJdfQ==