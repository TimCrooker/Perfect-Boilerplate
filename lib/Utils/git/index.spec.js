"use strict";

var _ = require("./");

var _util = require("util");

jest.mock('util', () => ({
  promisify: jest.fn(() => {
    throw new Error();
  })
}));
describe('Git Helper', () => {
  it('not found git url IsRepoExist', async () => {
    const isRepoExist = await _.GitHelper.RepoExists('http://github.com/alibaba/ciftligi');
    expect(isRepoExist.error).toBe('Source repository not found.');
  });
  it('not valid git url IsRepoExist', async () => {
    const isRepoExist = await _.GitHelper.RepoExists('pankod');
    expect(isRepoExist.error).toBe('Source path not valid');
  });
  it('valid git url CloneAndGetPath', async () => {
    ;

    _util.promisify.mockImplementation(() => jest.fn().mockResolvedValue({
      stdout: 'git@github.com:mock/url.git'
    }));

    const cloneAndPath = await _.GitHelper.CloneAndGetPath('https://github.com/pankod/action-test');
    expect(cloneAndPath).not.toBeFalsy();
  });
  it('invalid git url CloneAndGetPath', async () => {
    ;

    _util.promisify.mockImplementation(() => new Error());

    await expect(_.GitHelper.CloneAndGetPath('https://pankod.com')).rejects.toThrowError();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9VdGlscy9naXQvaW5kZXguc3BlYy50cyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInByb21pc2lmeSIsImZuIiwiRXJyb3IiLCJkZXNjcmliZSIsIml0IiwiaXNSZXBvRXhpc3QiLCJHaXRIZWxwZXIiLCJSZXBvRXhpc3RzIiwiZXhwZWN0IiwiZXJyb3IiLCJ0b0JlIiwibW9ja0ltcGxlbWVudGF0aW9uIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJzdGRvdXQiLCJjbG9uZUFuZFBhdGgiLCJDbG9uZUFuZEdldFBhdGgiLCJub3QiLCJ0b0JlRmFsc3kiLCJyZWplY3RzIiwidG9UaHJvd0Vycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUVBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxNQUFWLEVBQWtCLE9BQU87QUFDdkJDLEVBQUFBLFNBQVMsRUFBRUYsSUFBSSxDQUFDRyxFQUFMLENBQVEsTUFBTTtBQUN2QixVQUFNLElBQUlDLEtBQUosRUFBTjtBQUNELEdBRlU7QUFEWSxDQUFQLENBQWxCO0FBS0FDLFFBQVEsQ0FBQyxZQUFELEVBQWUsTUFBTTtBQUMzQkMsRUFBQUEsRUFBRSxDQUFDLCtCQUFELEVBQWtDLFlBQVk7QUFDOUMsVUFBTUMsV0FBVyxHQUFHLE1BQU1DLFlBQVVDLFVBQVYsQ0FDeEIsb0NBRHdCLENBQTFCO0FBSUFDLElBQUFBLE1BQU0sQ0FBQ0gsV0FBVyxDQUFDSSxLQUFiLENBQU4sQ0FBMEJDLElBQTFCLENBQStCLDhCQUEvQjtBQUNELEdBTkMsQ0FBRjtBQVFBTixFQUFBQSxFQUFFLENBQUMsK0JBQUQsRUFBa0MsWUFBWTtBQUM5QyxVQUFNQyxXQUFXLEdBQUcsTUFBTUMsWUFBVUMsVUFBVixDQUFxQixRQUFyQixDQUExQjtBQUVBQyxJQUFBQSxNQUFNLENBQUNILFdBQVcsQ0FBQ0ksS0FBYixDQUFOLENBQTBCQyxJQUExQixDQUErQix1QkFBL0I7QUFDRCxHQUpDLENBQUY7QUFNQU4sRUFBQUEsRUFBRSxDQUFDLCtCQUFELEVBQWtDLFlBQVk7QUFDOUM7O0FBQUVKLG1CQUFELENBQW1CVyxrQkFBbkIsQ0FBc0MsTUFDckNiLElBQUksQ0FBQ0csRUFBTCxHQUFVVyxpQkFBVixDQUE0QjtBQUFFQyxNQUFBQSxNQUFNLEVBQUU7QUFBVixLQUE1QixDQUREOztBQUlELFVBQU1DLFlBQVksR0FBRyxNQUFNUixZQUFVUyxlQUFWLENBQ3pCLHVDQUR5QixDQUEzQjtBQUlBUCxJQUFBQSxNQUFNLENBQUNNLFlBQUQsQ0FBTixDQUFxQkUsR0FBckIsQ0FBeUJDLFNBQXpCO0FBQ0QsR0FWQyxDQUFGO0FBWUFiLEVBQUFBLEVBQUUsQ0FBQyxpQ0FBRCxFQUFvQyxZQUFZO0FBQ2hEOztBQUFFSixtQkFBRCxDQUFtQlcsa0JBQW5CLENBQXNDLE1BQU0sSUFBSVQsS0FBSixFQUE1Qzs7QUFDRCxVQUFNTSxNQUFNLENBQ1ZGLFlBQVVTLGVBQVYsQ0FBMEIsb0JBQTFCLENBRFUsQ0FBTixDQUVKRyxPQUZJLENBRUlDLFlBRkosRUFBTjtBQUdELEdBTEMsQ0FBRjtBQU1ELENBakNPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaXRIZWxwZXIgfSBmcm9tICcuLydcclxuaW1wb3J0IHsgcHJvbWlzaWZ5IH0gZnJvbSAndXRpbCdcclxuXHJcbmplc3QubW9jaygndXRpbCcsICgpID0+ICh7XHJcbiAgcHJvbWlzaWZ5OiBqZXN0LmZuKCgpID0+IHtcclxuICAgIHRocm93IG5ldyBFcnJvcigpXHJcbiAgfSksXHJcbn0pKVxyXG5kZXNjcmliZSgnR2l0IEhlbHBlcicsICgpID0+IHtcclxuICBpdCgnbm90IGZvdW5kIGdpdCB1cmwgSXNSZXBvRXhpc3QnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBpc1JlcG9FeGlzdCA9IGF3YWl0IEdpdEhlbHBlci5SZXBvRXhpc3RzKFxyXG4gICAgICAnaHR0cDovL2dpdGh1Yi5jb20vYWxpYmFiYS9jaWZ0bGlnaSdcclxuICAgIClcclxuXHJcbiAgICBleHBlY3QoaXNSZXBvRXhpc3QuZXJyb3IpLnRvQmUoJ1NvdXJjZSByZXBvc2l0b3J5IG5vdCBmb3VuZC4nKVxyXG4gIH0pXHJcblxyXG4gIGl0KCdub3QgdmFsaWQgZ2l0IHVybCBJc1JlcG9FeGlzdCcsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGlzUmVwb0V4aXN0ID0gYXdhaXQgR2l0SGVscGVyLlJlcG9FeGlzdHMoJ3BhbmtvZCcpXHJcblxyXG4gICAgZXhwZWN0KGlzUmVwb0V4aXN0LmVycm9yKS50b0JlKCdTb3VyY2UgcGF0aCBub3QgdmFsaWQnKVxyXG4gIH0pXHJcblxyXG4gIGl0KCd2YWxpZCBnaXQgdXJsIENsb25lQW5kR2V0UGF0aCcsIGFzeW5jICgpID0+IHtcclxuICAgIDsocHJvbWlzaWZ5IGFzIGFueSkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+XHJcbiAgICAgIGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7IHN0ZG91dDogJ2dpdEBnaXRodWIuY29tOm1vY2svdXJsLmdpdCcgfSlcclxuICAgIClcclxuXHJcbiAgICBjb25zdCBjbG9uZUFuZFBhdGggPSBhd2FpdCBHaXRIZWxwZXIuQ2xvbmVBbmRHZXRQYXRoKFxyXG4gICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3BhbmtvZC9hY3Rpb24tdGVzdCdcclxuICAgIClcclxuXHJcbiAgICBleHBlY3QoY2xvbmVBbmRQYXRoKS5ub3QudG9CZUZhbHN5KClcclxuICB9KVxyXG5cclxuICBpdCgnaW52YWxpZCBnaXQgdXJsIENsb25lQW5kR2V0UGF0aCcsIGFzeW5jICgpID0+IHtcclxuICAgIDsocHJvbWlzaWZ5IGFzIGFueSkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IG5ldyBFcnJvcigpKVxyXG4gICAgYXdhaXQgZXhwZWN0KFxyXG4gICAgICBHaXRIZWxwZXIuQ2xvbmVBbmRHZXRQYXRoKCdodHRwczovL3BhbmtvZC5jb20nKVxyXG4gICAgKS5yZWplY3RzLnRvVGhyb3dFcnJvcigpXHJcbiAgfSlcclxufSlcclxuIl19