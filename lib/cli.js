"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Utils = require("./Utils");

var _commander = _interopRequireDefault(require("commander"));

var _path = _interopRequireDefault(require("path"));

var _prompts = _interopRequireDefault(require("prompts"));

var _sao = require("sao");

var _chalk = _interopRequireDefault(require("chalk"));

var _package = _interopRequireDefault(require("../package.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const generator = _path.default.resolve(__dirname, './');

const cli = async () => {
  /**
   * Get target project-directory
   */
  const program = _commander.default.name(_package.default.name).version(_package.default.version).arguments('<project-directory>').usage(`${_chalk.default.green('<project-directory>')} [options]`).description(_package.default.description).option('-s, --source <source-path>', 'specify a custom source of plugins').option('-d, --debug', 'run the program in debug mode').parse(process.argv);
  /**
   * Check target project-directory exists
   */


  const [projectDir] = program.args; // handle undefined project dir

  if (projectDir === undefined) {
    console.error('No specified project directory');
    process.exit(1);
  }
  /**
   * Get the plugin source directory
   */


  const source = await (0, _Utils.getSource)(program.source);
  let {
    path: sourcePath
  } = source;
  const {
    error: sourceError
  } = source; // error when supplied source doesn't exist

  if (sourceError) {
    console.error(`${_chalk.default.bold`${sourceError}`}`);
    console.log('Source can be a remote git repository or a local path.');
    console.log();
    console.log('You provided:');
    console.log(`${_chalk.default.blueBright(program.source)}`);
    process.exit(1);
  }

  const packTypes = [];
  /**
   * Verify validity and load plugin packs from supplied directory
   */

  if (sourcePath) {
    const pluginPacks = await _Utils.FSHelper.ReadDir(sourcePath); // error when the plugin source contains no plugins

    if (pluginPacks.length === 0) {
      console.log();
      console.error(_chalk.default.red('ERROR: ') + 'The plugin source directory has no plugins');
      console.log();
      process.exit(1);
    } // create a list of all plugin packs and determine if they are valid


    for (const pluginPack of pluginPacks) {
      const pluginDirPath = `${sourcePath}/${pluginPack}`;
      const packIsValid = await _Utils.FSHelper.ValidPluginPack(pluginDirPath);

      if (packIsValid) {
        packTypes.push({
          title: pluginPack,
          value: pluginPack
        });
      } else {
        console.error(_chalk.default.red('ERROR: ') + 'The plugin pack ' + _chalk.default.cyan(pluginPack) + ' at the directory ' + _chalk.default.cyan(pluginDirPath) + ' is invalid');
        console.log();
      }
    } // error when none of the supplied plugin packs are valid


    if (packTypes.length === 0) {
      console.log();
      console.error(_chalk.default.red('ERROR: ') + 'NONE of the supplied plugin packs are valid');
      console.log();
      process.exit(1);
    }
  }
  /**
   * User selects plugin pack to use
   */


  const {
    projectType
  } = await (0, _prompts.default)({
    type: 'select',
    name: 'projectType',
    message: 'Select your project type',
    choices: packTypes
  });
  sourcePath = `${sourcePath}/${projectType}`;
  /**
   * Create and run new SAO instance with above CLI details
   */

  const sao = new _sao.SAO({
    generator,
    outDir: projectDir,
    logLevel: program.debug ? 4 : 1,
    appName: projectDir,
    extras: {
      debug: !!program.debug,
      paths: {
        sourcePath
      }
    }
  });
  await sao.run().catch(err => {
    console.log(`${program.name()} has encountered an error.`);
    console.log();
    console.log(`If you think this is caused by a bug. Please check out:`);
    console.log(_package.default.author);
    console.log();
    console.error('ERROR', err);
    process.exit(1);
  });
};

var _default = cli;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,